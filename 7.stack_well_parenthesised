#include <iostream>
#include<string.h>
using namespace std;

class stack
{
public:
	int top;
	char* arr;
	int size;
	stack()
	{
		top = -1;
	}
	void push(char ch);
	char pop();
	void check(string s);
};

void stack::check(string s)
{
	int flag = 0;
	int i = 0;
	while (s[i] != '\0')
	{
		char ch = s[i];

		if (ch == '(' || ch == '[' || ch == '{')
		{
			push(ch);
		}

		else if (ch == ')')
		{
			if (top == -1)
			{
				flag++;
				break;
			}
			else
			{
				char c = pop();
				if (c != '(')
				{
					flag++;
					break;
				}
			}
		}
		else if(ch==']')
		{
			if (top == -1)
			{
				flag++;
				break;
			}
			else
			{
				char c = pop();
				if (c != '[')
				{
					flag++;
					break;
				}
			}
		}
		else if (ch == '}')
		{
			if (top == -1)
			{
				flag++;
				break;
			}
			else
			{
				char c = pop();
				if (c != '{')
				{
					flag++;
					break;
				}
			}
		}
		i++;
	}

	if (flag == 0 && top==-1)
	{
		cout << "Parenthesis Match" << endl;
	}
	else
	{
		cout << "No match" << endl;
	}
}

void stack::push(char ch)
{
	if(top==size-1)
		cout<<"Stack is Full"<<endl;

	else
	{
		top++;
		arr[top] = ch;
	}
}

char stack::pop()
{
	char temp = NULL;

		temp = arr[top];
		top--;
	
	return temp;
}

int main()
{
	int ch;

	do
	{
		string s;
		stack st;
		cout << "Enter expression" << endl;
		cin >> s;

		st.size = s.length();
		st.arr = new char[s.length()];

		st.check(s);

		cout << "Enter 0 to Exit" << endl;
		cin >> ch;

	} while (ch != 0);

	return 0;
}
