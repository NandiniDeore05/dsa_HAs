//
//there seems to be a prob with intersection
//test case that fails is univ:1 2 3 4 5 6 
//van:1 2 4 6
//bs:2 5 
#include <iostream>
using namespace std;
class node
{
public:
	string name;
	int prn;
	node* next;
	node* prev;
};
class dll
{
public:
	node* head;
	node* tail;
	dll()
	{
		tail=head = NULL;
	}
	//void add_first(node* nnf);
	//void add_between(node *nnb);
	void add_last(node* nnl);
	int display(node* just);
	void details(node* get);
	void add_left(node* start);
	void intersection(node* temp1, node* temp2);
};
void dll::details(node* get)
{
	cout << "Enter member details" << endl;
	cout << "Name :";
	cin >> get->name;
	cout << "Number :";
	cin >> get->prn;
}
/*void cll::add_first(node *nnf)
{

	if (head == NULL)
	{
		head = nnf;
		nnf->next = nnf;
		nnf->prev = nnf;
	}
	else
	{
		nnf->next = head;
		head->prev = nnf;
		nnf->prev = NULL;
		head = nnf;
	}
}*/
void dll::add_last(node* nnl)
{
	if (head == NULL)
	{
		head =tail = nnl;
		tail->next = NULL;
		head->prev = NULL;
	}
	else
	{
		tail->next = nnl;
		nnl->prev = tail;
		tail = nnl;
		tail->next = NULL;
	}
}
int dll::display(node* just)
{
	int count = 0;

	while (just!=NULL)
	{
		cout << just->name << endl;
		cout << just->prn << endl;
		just = just->next;
		count++;
	}
	cout << "Total members " << count << endl;

	return count;
}
void dll::add_left(node *start)
{

	while (start != NULL)
	{
		int flag = 0;
		node* temp = head;
		while (temp != NULL)
		{
			if (temp->prn == start->prn)
			{
				flag++;
				break;
			}
			else
			{
				temp = temp->next;
			}
		}
		if(flag==0)
		{
			node* n = new node;
			n->name = start->name;
			n->prn = start->prn;
			n->next = NULL;
			n->prev = NULL;
			add_last(n);
		}
		start = start->next;
	}
}
void dll::intersection(node* temp1,node* temp2)
{
	node* temp3;
	temp3= temp2;
	while (temp1 != NULL)
	{
		int flag = 0;
		temp2 = temp3;
		while (temp2 != NULL)
		{
			if (temp1->prn == temp2->prn)
			{
				flag++;
				break;
			}
			else
			{
				temp2 = temp2->next;
			}
		}
		if (flag == 1)
		{
			node* n = new node;
			n->name = temp1->name;
			n->prn = temp1->prn;
			//cout << temp1->name;
			n->next = NULL;
			n->prev = NULL;
			add_last(n);
			temp1 = temp1->next;
		}
		else
		{
			temp1 = temp1->next;
		}
	}
}
int main()
{
	typedef int counter;
	typedef int select;
	counter c1, c2, c3;
	select s1, s2, s3;
	dll univ;
	cout << "Enter all the members" << endl;

	do
	{
		node* nn = new node;
		univ.details(nn);
		nn->next = NULL;
		nn->prev = NULL;
		univ.add_last(nn);
		c1=univ.display(univ.head);
		cout << "Enter 0 to stop" << endl;
		cin >> s1;
	} while (s1 != 0);

	dll van;
	cout << "Enter members who love vanilla" << endl;

	do
	{
		node* nn = new node;
		van.details(nn);
		nn->next = NULL;
		nn->prev = NULL;
		van.add_last(nn);
		c2=van.display(van.head);
		cout << "Enter 0 to stop" << endl;
		cin >> s2;
	} while (s2 != 0);

	dll bs;
	cout << "Enter members who love butterscotch" << endl;

	do
	{
		node* nn = new node;
		bs.details(nn);
		nn->next = NULL;
		nn->prev = NULL;
		bs.add_last(nn);
		c3=bs.display(bs.head);
		cout << "Enter 0 to stop" << endl;
		cin >> s3;
	} while (s3 != 0);

	//cout << c1 << c2 << c3<<endl;

	cout << "Students who like vanilla or bs or both" << endl;
	dll d;
	if (c2 > c3)
	{
		d = van;
		d.add_left(bs.head);
		d.display(d.head);
	}
	else
	{
		d = bs;
		d.add_left(van.head);
		d.display(d.head);
	}

	cout<<"Set of students who like both vanilla and butterscotch"<<endl;
	dll e;
	e.intersection(van.head,bs.head);
	e.display(e.head);

	cout<<"Set of students who like only vanilla not butterscotch "<< endl;


	return 0;
}
