#include<iostream>
using namespace std;
//============================================================================
// Name        : infix.cpp
// Author      : ryl
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
//we need to push (#) first
//create a isoperand and pre function
//change slightly the isempty() to get perfect result
//code is imp and tricky
// +,- --> 1
//*,/ --> 2
//#---> -1
#include <iostream>
#include<string.h>
using namespace std;
class stack
{
public:
	int top;
	char* array;
	int size;
	stack()
	{
		top = -1;
	}
	char* convert(char* exp);
	void push(int n);
	char pop();
	char tops();
	int pre(char x);
	bool isoperand(char y);
	bool isempty();
};

int stack::pre(char x)
{
	if (x == '+' || x == '-')
	{
		return 1;
	}
	else if (x == '*' || x == '/')
	{
		return 2;
	}
	else if (x == '#')
	{
		return -1;
	}
	return 0;
}
bool stack::isoperand(char y)
{
	if (y == '+' || y == '-' || y == '*' || y == '/')
	{
		return false;
	}
	return true;
}
char* stack::convert(char* exp)
{
	int i = 0;
	int j = 0;
	char* postfix = new char[strlen(exp)+1];
	push('#');

	while (exp[i] != '\0')
	{
			if (isoperand(exp[i]))
			{
				postfix[j++] = exp[i++];
			}
			else
			{
				int c1=pre(exp[i]);
				char tmp = tops();
				int c2 = pre(tmp);

				if (c1 > c2)
				{
					push(exp[i++]);
				}
				else
				{
					postfix[j++] = pop();
				}

			}
	}
	while (!isempty())
	{
		postfix[j++] = pop();
	}
	postfix[j] = '\0';

	return postfix;
}
char stack::tops()
{
	char temp = array[top];
	return temp;
}
void stack::push(int n)
{
	if (top == size - 1)
	{
		cout << "Stack Full" << endl;
	}
	else
	{
		array[++top] = n;
	}
}
bool stack::isempty()
{
	if (top == 0)
	{
		return true;
	}
	return false;
}
char stack::pop()
{
	char temp;
	if (top == -1)
	{
		cout << "Empty stack" << endl;
	}
	else
	{
		temp = array[top--];
	}
	return temp;
}
int main()
{
	stack st;

	char exp[1000];
	cout << "Enter infix expression" << endl;
	cin.getline(exp, 1000);
	int l = strlen(exp);
	st.size = l;
    st.array = new char[l+1];

	char *expc = st.convert(exp);

	for (int i = 0; expc[i] != '\0'; i++)
	{
		cout << expc[i];
	}
	return 0;
}
