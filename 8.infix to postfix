//we need to push (#) first.
//create a isoperand and pre function
//change slightly the isempty() to get perfect result
//code is imp and tricky
// +,- --> 1
//*,/ --> 2
//#---> -1
//I havent included ^ and ( right now
//also try for dealing with a string rather than array.
//2 stacks need to be made. One int stack and other char stack. so, 2 stack classes.
//try to avoid going into the loop thru a !='\0' conditioning for a int type of array.
//Most importantly,
//To start of a any stack
//class stack
//(
//int top;
//int size;
//char(or int)*array;
//stack() {top=-1;}
);
//PLUS in main
//st.array=new char(or int)[length];
//st.size=length;
//in char arrays--- use !='\0' as conditioner
//BUT , in int array use <=count as conditioner
#include <iostream>
#include<string.h>
using namespace std;
class stack /*This is a char stack for converting to infix expresion*/
{
public:
	int top;
	char* array;
	int size;
	stack()
	{
		top = -1;
	}
	char* convert(char* exp);
	void push(char n);
	char pop();
	char tops();
	int pre(char x);
	bool isoperand(char y);
	bool isempty();
};

int stack::pre(char x)
{
	if (x == '+' || x == '-')
	{
		return 1;
	}
	else if (x == '*' || x == '/')
	{
		return 2;
	}
	else if (x == '#')
	{
		return -1;
	}
	return 0;
}
bool stack::isoperand(char y)
{
	if (y == '+' || y == '-' || y == '*' || y == '/')
	{
		return false;
	}
	return true;
}
char* stack::convert(char* exp)
{
	int i = 0;
	int j = 0;
	char* postfix = new char[strlen(exp)+1];
	push('#');

	while (exp[i] != '\0')
	{
			if (isoperand(exp[i]))
			{
				postfix[j++] = exp[i++];
			}
			else
			{
				int c1=pre(exp[i]);
				char tmp = tops();
				int c2 = pre(tmp);

				if (c1 > c2)
				{
					push(exp[i++]);
				}
				else
				{
					postfix[j++] = pop();
				}

			}
	}
	while (!isempty())
	{
		postfix[j++] = pop();
	}
	postfix[j] = '\0';

	return postfix;
}
char stack::tops()
{
	char temp = array[top];
	return temp;
}
void stack::push(char n)
{
	if (top == size - 1)
	{
		cout << "Stack Full" << endl;
	}
	else
	{
		array[++top] = n;
	}
}
bool stack::isempty()
{
	if (top == 0)
	{
		return true;
	}
	return false;
}
char stack::pop()
{
	char temp;
	if (top == -1)
	{
		cout << "Empty stack" << endl;
	}
	else
	{
		temp = array[top--];
	}
	return temp;
}
class stack2 /*This is a int stack for evaluating postfix expresion*/
{
public:
	int top;
	int* arr;
	int size;
	stack2()
	{
		top = -1;
	}
	int evaluate(char* eval,int len);
	int calc(int lo, int ro, char sign);
	void push(int n);
	int pop();
	int tops();
	bool isoperand(char y);
	//bool isempty(); not reqd
};
int stack2::evaluate(char* eval,int len)
{
	int* values = new int[len + 1];
	int c = 0;
	for (int i = 0; eval[i]!='\0'; i++) // created an array only for values of the operands
	{
		if (isoperand(eval[i]))
		{
			cout << "Enter value for " << eval[i] << endl;
			cin >> values[c++];
		}
	}

	int s = 0;
	for (int i = 0; eval[i] != '\0'; i++)//whenevr we came acros opernd in postfix,we take elem frm int array('values[i]')& operate on it.
	{
		if (isoperand(eval[i]))
		{
			push(values[s++]);//a diff s needs to be there n incremented seperately than 'i'
		}
		else
		{
			int x = pop();
			int y = pop();
			int z = calc(y, x,eval[i]);//remeber the first popped ele is right operand(ro)
			push(z);
		}
	}
	int result = tops();//tops will contain result at the end.
	cout << result << endl;
	return result;
}
int stack2::calc(int lo, int ro,char sign)
{
	if (sign == '+')
	{
		return (lo + ro);
	}
	else if (sign == '-')
	{
		return (lo - ro);
	}
	else if (sign == '*')
	{
		return (lo * ro);
	}
	else if (sign == '/')
	{
		return (lo / ro);
	}
	return 0;
}
bool stack2::isoperand(char y)
{
	if (y == '+' || y == '-' || y == '*' || y == '/')
	{
		return false;
	}
	return true;
}
void stack2::push(int n)
{

	if (top == size - 1)
	{
		cout << "Stack Full" << endl;
	}
	else
	{
		arr[++top] = n;
	}
}
int stack2::pop()
{
	int temp;
	if (top == -1)
	{
		cout << "Empty stack" << endl;
	}
	else
	{
		temp = arr[top--];
	}
	return temp;
}
int stack2::tops()
{
	int tempo = arr[top];
	return tempo;
}
int main()
{
	stack st;
	char exp[1000];
	cout << "Enter infix expression" << endl;
	cin.getline(exp, 1000);
	int l = strlen(exp);
	st.size = l;
    st.array = new char[l+1];

	char *expc = st.convert(exp);
	cout << "Postfix expression: " << endl;
	for (int i = 0; expc[i] != '\0'; i++)
	{
		cout << expc[i];
	}
	cout << endl;

	stack2 stk;
	stk.arr = new int[l+1];
	stk.size = l;
	cout << "Result : " << endl;
	int res = stk.evaluate(expc, l);
	cout << res << endl;

	return 0;
}
